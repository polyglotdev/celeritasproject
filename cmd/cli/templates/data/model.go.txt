package data

import (
	up "github.com/upper/db/v4"
	"time"
)

// $MODELNAME$ is a model for the $TABLENAME$ table
type $MODELNAME$ struct {
	ID        int       `db:"id,omitempty"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

// Table returns the table name
func ($FIRSTLETTER$ *$MODELNAME$) Table() string {
	return "$TABLENAME$"
}

// GetAll gets all records from the database, using upper
func ($FIRSTLETTER$ *$MODELNAME$) GetAll(condition up.Cond) ([]*$MODELNAME$, error) {
	var all []*$MODELNAME$
	collection := upper.Collection($FIRSTLETTER$.Table())

	res := collection.Find(condition)
	err := res.All(&all)
	if err != nil {
		return nil, err
	}

	return all, err
}

// Get gets one record from the database, by id, using upper
func ($FIRSTLETTER$ *$MODELNAME$) Get(id int) (*$MODELNAME$, error) {
	var one $MODELNAME$
	collection := upper.Collection($FIRSTLETTER$.Table())

	res := collection.Find(up.Cond{"id": id})
	err := res.One(&one)
	if err != nil {
		return nil, err
	}
	return &one, nil
}

// Update updates a record in the database, using upper
func ($FIRSTLETTER$ *$MODELNAME$) Update(m $MODELNAME$) error {
	m.UpdatedAt = time.Now()
	collection := upper.Collection($FIRSTLETTER$.Table())
	res := collection.Find(m.ID)
	err := res.Update(&m)
	if err != nil {
		return err
	}
	return nil
}

// Delete deletes a record from the database by id, using upper
func ($FIRSTLETTER$ *$MODELNAME$) Delete(id int) error {
	collection := upper.Collection($FIRSTLETTER$.Table())
	res := collection.Find(id)
	err := res.Delete()
	if err != nil {
		return err
	}
	return nil
}

// Insert inserts a model into the database, using upper
func ($FIRSTLETTER$ *$MODELNAME$) Insert(m $MODELNAME$) (int, error) {
	m.CreatedAt = time.Now()
	m.UpdatedAt = time.Now()
	collection := upper.Collection($FIRSTLETTER$.Table())
	res, err := collection.Insert(m)
	if err != nil {
		return 0, err
	}

	id := getInsertID(res.ID())
	return id, nil
}

// Builder is an example of using upper's sql builder
func ($FIRSTLETTER$ *$MODELNAME$) Builder(id int) ([]*$MODELNAME$, error) {
	collection := upper.Collection($FIRSTLETTER$.Table())
	var result []*$MODELNAME$

	err := collection.Session().
		SQL().
			SelectFrom($FIRSTLETTER$.Table()).
			Where("id > ?", id).
			OrderBy("id").
			All(&result)
	if err != nil {
		return nil, err
	}
	return result, nil
}